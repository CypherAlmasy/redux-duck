{
  "name": "redux-duck",
  "tagline": "Helper function to create Redux modules using the ducks-modular-redux proposal",
  "body": "# redux-duck\r\nHelper function to create Redux modules using the `ducks-modular-redux` proposal.\r\n\r\n## Installation\r\n```bash\r\nnpm i -S redux-duck\r\n```\r\n\r\n## API\r\n### Create duck\r\n```javascript\r\nimport { createDuck } from 'redux-duck';\r\n\r\nconst myDuck = createDuck('duck-name', 'application-name');\r\n```\r\n* `createDuck` receive 2 arguments, the second argument is optional.\r\n* The first argument is the duck name.\r\n* The second, and optional, argument is the application or module name.\r\n\r\n### Define action types\r\n```javascript\r\nconst ACTION_TYPE = myDuck.defineType('ACTION_TYPE');\r\n```\r\n* `defineType` receive just one argument.\r\n* The argument is the name of the action.\r\n* The result should be an string like `application-name/duck-name/ACTION_TYPE` or `duck-name/ACTION_TYPE` if the application or module name was not defined.\r\n\r\n### Create action creators\r\n```javascript\r\nconst actionType = myDuck.createAction(ACTION_TYPE);\r\n```\r\n* `createAction` receive just one argument.\r\n* This argument should be the defined action type string.\r\n* It should return a function who will receive the action payload and return a valid (FSA compilant) action object.\r\n* The action creator will receive an optional argument with the action payload.\r\n\r\n### Create reducer\r\n```javascript\r\nconst initialState = {\r\n  list: Immutable.List(),\r\n  data: Immutable.Map(),\r\n};\r\n\r\nconst reducer = myDuck.createReducer({\r\n  [ACTION_TYPE]: (state, action) => ({\r\n    ...state,\r\n    list: state.list.push(action.payload.id),\r\n    data: state.map.set(action.payload.id+'', action.payload),\r\n  }),\r\n}, initialState);\r\n```\r\n* `createReducer` receive two arguments, both required.\r\n* The first argument is an object with the possible action cases.\r\n* The second argument is the reducer initial state.\r\n* The first argument should use the previously defined *action types* as keys.\r\n* Each key in the first argument object should be a function who will receive the current state and the dispatched action as arguments and return the updated state.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}